name: Auto-merge Dependabot PRs

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  pull_request_review:
    types: [submitted]
  check_suite:
    types: [completed]

permissions:
  contents: write
  pull-requests: write
  checks: read

jobs:
  auto-merge:
    name: 🤖 Auto-merge Dependabot PRs
    runs-on: ubuntu-latest
    if: github.actor == 'dependabot[bot]'
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔍 Get Dependabot metadata
        id: metadata
        uses: dependabot/fetch-metadata@v2
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"

      - name: 🧪 Check if CI is passing
        id: ci-status
        uses: actions/github-script@v7
        with:
          script: |
            const { data: checks } = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.payload.pull_request.head.sha,
            });
            
            const requiredChecks = [
              'lint',
              'backend-test',
              'mobile-test',
              'security-audit'
            ];
            
            const passedChecks = checks.check_runs.filter(check => 
              requiredChecks.includes(check.name) && check.conclusion === 'success'
            );
            
            const allPassed = requiredChecks.every(required => 
              passedChecks.some(passed => passed.name === required)
            );
            
            core.setOutput('ci-passing', allPassed);
            return allPassed;

      - name: 🚦 Auto-approve and merge minor/patch updates
        if: |
          steps.ci-status.outputs.ci-passing == 'true' && (
            steps.metadata.outputs.update-type == 'version-update:semver-minor' ||
            steps.metadata.outputs.update-type == 'version-update:semver-patch'
          )
        run: |
          # Auto-approve the PR
          gh pr review --approve "$PR_URL"
          
          # Enable auto-merge with squash
          gh pr merge --auto --squash "$PR_URL"
          
          echo "✅ Auto-approved and enabled auto-merge for ${{ steps.metadata.outputs.update-type }} update"
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: ⚠️ Comment on major updates
        if: |
          steps.metadata.outputs.update-type == 'version-update:semver-major'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ⚠️ Major Version Update Detected
              
              This PR contains a **major version update** that may include breaking changes:
              
              **Package:** \`${{ steps.metadata.outputs.dependency-names }}\`
              **Update Type:** \`${{ steps.metadata.outputs.update-type }}\`
              **Compatibility Score:** ${{ steps.metadata.outputs.compatibility-score }}%
              
              ### 🔍 Manual Review Required
              - [ ] Review changelog for breaking changes
              - [ ] Test thoroughly in development environment
              - [ ] Update code if necessary
              - [ ] Check for deprecated APIs
              
              **Auto-merge is disabled for this PR.** Please review and merge manually after testing.`
            });

      - name: 🔒 Comment on security updates
        if: steps.metadata.outputs.alert-state == 'OPEN'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🔒 Security Update Available
              
              This PR addresses a security vulnerability:
              
              **Alert State:** ${{ steps.metadata.outputs.alert-state }}
              **CVE ID:** ${{ steps.metadata.outputs.cve-id }}
              **CVSS Score:** ${{ steps.metadata.outputs.cvss }}
              **GHSA ID:** ${{ steps.metadata.outputs.ghsa-id }}
              
              ### 🚨 Recommended Action
              - Review the security advisory
              - Consider prioritizing this update
              - Test in development environment
              
              This PR will be auto-merged if CI passes (security updates are prioritized).`
            });

  dependency-update-notification:
    name: 📢 Dependency Update Summary
    runs-on: ubuntu-latest
    if: github.actor == 'dependabot[bot]' && github.event.action == 'opened'
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔍 Get Dependabot metadata
        id: metadata
        uses: dependabot/fetch-metadata@v2
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"

      - name: 📊 Generate update summary
        uses: actions/github-script@v7
        with:
          script: |
            const updateType = '${{ steps.metadata.outputs.update-type }}';
            const packageNames = '${{ steps.metadata.outputs.dependency-names }}'.split(',');
            const packageType = '${{ steps.metadata.outputs.package-ecosystem }}';
            
            let emoji = '📦';
            let urgency = 'Normal';
            let autoMerge = 'Yes (if CI passes)';
            
            switch(updateType) {
              case 'version-update:semver-major':
                emoji = '🔴';
                urgency = 'Manual Review Required';
                autoMerge = 'No';
                break;
              case 'version-update:semver-minor':
                emoji = '🟡';
                break;
              case 'version-update:semver-patch':
                emoji = '🟢';
                break;
            }
            
            if ('${{ steps.metadata.outputs.alert-state }}' === 'OPEN') {
              emoji = '🔒';
              urgency = 'Security Update';
              autoMerge = 'Yes (prioritized)';
            }
            
            const summary = `${emoji} **Dependency Update Summary**
            
            | Field | Value |
            |-------|-------|
            | Package(s) | \`${packageNames.join('`, `')}\` |
            | Ecosystem | \`${packageType}\` |
            | Update Type | \`${updateType}\` |
            | Urgency | ${urgency} |
            | Auto-merge | ${autoMerge} |
            | Compatibility Score | ${{ steps.metadata.outputs.compatibility-score }}% |
            
            ### 🔄 Next Steps
            ${autoMerge === 'No' ? 
              '- Manual review and testing required\n- Check for breaking changes\n- Update code if necessary' : 
              '- CI checks will run automatically\n- PR will auto-merge if all checks pass\n- Monitor for any issues after merge'
            }`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

  # 週次レポート生成
  weekly-dependency-report:
    name: 📊 Weekly Dependency Report
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' # 別途スケジュールトリガーを追加する場合
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 📊 Generate dependency report
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pulls } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'all',
              creator: 'dependabot[bot]',
              sort: 'updated',
              direction: 'desc',
              per_page: 50
            });
            
            const lastWeek = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);
            const recentPRs = pulls.filter(pr => new Date(pr.updated_at) > lastWeek);
            
            const merged = recentPRs.filter(pr => pr.merged_at);
            const open = recentPRs.filter(pr => pr.state === 'open');
            const closed = recentPRs.filter(pr => pr.state === 'closed' && !pr.merged_at);
            
            const report = `## 📊 Weekly Dependency Update Report
            
            **Report Period:** ${lastWeek.toISOString().split('T')[0]} - ${new Date().toISOString().split('T')[0]}
            
            ### 📈 Summary
            - **Merged:** ${merged.length} PRs
            - **Open:** ${open.length} PRs
            - **Closed (not merged):** ${closed.length} PRs
            
            ### 🔀 Recent Merges
            ${merged.slice(0, 10).map(pr => `- [${pr.title}](${pr.html_url})`).join('\n')}
            
            ### 🔄 Currently Open
            ${open.slice(0, 5).map(pr => `- [${pr.title}](${pr.html_url})`).join('\n')}
            
            ### 💡 Recommendations
            - Review open security updates immediately
            - Consider updating local development environments
            - Check for any breaking changes in recent updates
            `;
            
            // Issue として投稿するか、Discussion として投稿
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Weekly Dependency Report - ${new Date().toISOString().split('T')[0]}`,
              body: report,
              labels: ['dependencies', 'weekly-report']
            });