name: Backend - Go Build & Deploy

on:
  push:
    branches: [main, develop]
    paths:
      - 'apps/backend/**'
      - '.github/workflows/backend-deploy.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'apps/backend/**'

  # 手動実行も可能
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  GO_VERSION: '1.24.0'
  DOCKER_REGISTRY: 'ghcr.io'
  IMAGE_NAME: '${{ github.repository }}/backend'

jobs:
  # ----- Tests with different Go versions -----
  test-matrix:
    name: Test (Go ${{ matrix.go-version }})
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: apps/backend
    
    strategy:
      matrix:
        go-version: ['1.24.0', '1.23.x']
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_app
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache-dependency-path: apps/backend/go.sum

      - name: Install dependencies
        run: go mod download

      - name: Run go vet
        run: go vet ./...

      - name: Run tests with race detector
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_app?sslmode=disable
        run: |
          go test -v -race -coverprofile=coverage.out -covermode=atomic ./...

      - name: Generate coverage report
        if: matrix.go-version == env.GO_VERSION
        run: |
          go tool cover -html=coverage.out -o coverage.html
          go tool cover -func=coverage.out

      - name: Upload coverage to Codecov
        if: matrix.go-version == env.GO_VERSION
        uses: codecov/codecov-action@v4
        with:
          file: apps/backend/coverage.out
          flags: backend
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload coverage artifact
        if: matrix.go-version == env.GO_VERSION
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: apps/backend/coverage.html
          retention-days: 7

  # ----- Benchmark & Performance tests -----
  benchmark:
    name: Benchmark
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    defaults:
      run:
        working-directory: apps/backend
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_app
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: apps/backend/go.sum

      - name: Install dependencies
        run: go mod download

      - name: Run benchmarks
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_app?sslmode=disable
        run: |
          # ベンチマークが存在する場合のみ実行
          if find . -name "*_test.go" -exec grep -l "func Benchmark" {} \; | head -1 > /dev/null; then
            go test -bench=. -benchmem -run=^$ ./... | tee benchmark_result.txt
          else
            echo "No benchmarks found, skipping..."
          fi

      - name: Comment benchmark results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = './apps/backend/benchmark_result.txt';
            
            if (fs.existsSync(path)) {
              const benchmark = fs.readFileSync(path, 'utf8');
              
               const comment = `## Benchmark Results
              
              \`\`\`
              ${benchmark}
              \`\`\`
              
              > Benchmark comparison with base branch coming soon!`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

  # ----- Security scanning -----
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: apps/backend
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: apps/backend/go.sum

      - name: Install dependencies
        run: go mod download

      - name: Run Gosec Security Scanner (gosec)
        run: |
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          $GOPATH/bin/gosec -fmt sarif -out results.sarif ./...

      - name: Upload SARIF file
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif

      - name: Run govulncheck
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...

  # ----- Build multi-platform binaries -----
  build:
    name: Build (${{ matrix.os }}/${{ matrix.arch }})
    runs-on: ubuntu-latest
    needs: [test-matrix, security]
    defaults:
      run:
        working-directory: apps/backend
    
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
          - os: linux
            arch: arm64
          - os: darwin
            arch: amd64
          - os: darwin
            arch: arm64
          - os: windows
            arch: amd64
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: apps/backend/go.sum

      - name: Install dependencies
        run: go mod download

      - name: Build binary
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
        run: |
          BINARY_NAME="server"
          if [ "${{ matrix.os }}" = "windows" ]; then
            BINARY_NAME="server.exe"
          fi
          
          CGO_ENABLED=0 go build \
            -ldflags="-w -s -X main.version=${{ github.sha }} -X main.buildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
            -o "bin/${BINARY_NAME}" \
            ./cmd/server

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-${{ matrix.os }}-${{ matrix.arch }}
          path: apps/backend/bin/*
          retention-days: 7

  # ----- Docker build & push -----
  docker:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    defaults:
      run:
        working-directory: apps/backend
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Create Dockerfile
        run: |
          cat > Dockerfile << 'EOF'
          # Multi-stage build for minimal production image
          FROM golang:1.24-alpine AS builder
          
          WORKDIR /app
          
          # Install dependencies
          COPY go.mod go.sum ./
          RUN go mod download
          
          # Copy source code
          COPY . .
          
          # Build the binary
          RUN CGO_ENABLED=0 GOOS=linux go build \
              -ldflags="-w -s" \
              -o bin/server ./cmd/server
          
          # Production stage
          FROM alpine:latest
          
          # Install ca-certificates for HTTPS requests
          RUN apk --no-cache add ca-certificates
          
          WORKDIR /root/
          
          # Copy binary from builder stage
          COPY --from=builder /app/bin/server .
          
          # Create non-root user
          RUN addgroup -g 1001 -S appgroup && \
              adduser -u 1001 -S appuser -G appgroup
          USER appuser
          
          EXPOSE 8080
          
          CMD ["./server"]
          EOF

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: apps/backend
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ----- Deploy to staging -----
  deploy-staging:
    name: Deploy to Staging
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    runs-on: ubuntu-latest
    needs: [docker]
    environment: staging
    
    steps:
      - name: Deploy to staging environment
        run: |
          echo "Deploying to staging..."
          # ここに実際のデプロイロジックを追加
          
          # 例: Kubernetes deployment
          # kubectl set image deployment/backend-app container=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          
          # 例: Docker Swarm
          # docker service update --image ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} backend_app
          
          # 例: Railway
          # railway deploy --service backend --image ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          
          # 例: Render
          # render deploy --service backend --image ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

  # ----- Deploy to production -----
  deploy-production:
    name: Deploy to Production
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'))
    runs-on: ubuntu-latest
    needs: [docker]
    environment: production
    
    steps:
      - name: Deploy to production environment
        run: |
          echo "Deploying to production..."
          # ここに実際のデプロイロジックを追加
          
          # プロダクション環境へのデプロイ設定
          # Blue-Green deploymentやRolling deploymentの実装も検討

      - name: Health check
        run: |
          echo "Performing health check..."
          # デプロイ後のヘルスチェック
          # curl -f https://your-api.com/health || exit 1

      - name: Notify deployment success
        if: success()
        run: |
          echo "Production deployment successful!"
          # Slack, Discord, メール通知など

  # ----- Database migrations -----
  migrate:
    name: Run Database Migrations
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: [deploy-production]
    environment: production
    defaults:
      run:
        working-directory: apps/backend
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install migrate tool
        run: |
          go install -tags 'postgres' github.com/golang-migrate/migrate/v4/cmd/migrate@latest

      - name: Run migrations
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
        run: |
          migrate -path ./migrations -database "$DATABASE_URL" up
          echo "Migrations completed successfully"