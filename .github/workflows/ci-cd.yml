name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20.x'
  GO_VERSION: '1.24.0'

jobs:
  # ----- Quality Checks -----
  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint
        run: pnpm run lint

      - name: Format check
        run: pnpm run format:check

  # ----- Backend Tests & Build -----
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: apps/backend
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_app
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: apps/backend/go.sum

      - name: Install dependencies
        run: go mod download

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for postgres..."
            sleep 2
          done

      - name: Run tests
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_app?sslmode=disable
        run: |
          go test -v -race -coverprofile=coverage.out ./...

      - name: Upload coverage to Codecov
        if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
        uses: codecov/codecov-action@v4
        with:
          file: apps/backend/coverage.out
          flags: backend
          token: ${{ secrets.CODECOV_TOKEN }}

  backend-build:
    name: Backend Build
    runs-on: ubuntu-latest
    needs: [lint, backend-test]
    defaults:
      run:
        working-directory: apps/backend
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: apps/backend/go.sum

      - name: Install dependencies
        run: go mod download

      - name: Build binary
        run: |
          CGO_ENABLED=0 GOOS=linux go build -ldflags="-w -s" -o bin/server ./cmd/server

      - name: Upload build artifact
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: backend-binary
          path: apps/backend/bin/server
          retention-days: 7

  # ----- Mobile Tests & Build -----
  mobile-test:
    name: Mobile Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: apps/mobile
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint mobile
        run: pnpm run lint

      # テストがある場合はここで実行
      # - name: Run tests
      #   run: pnpm test

      - name: Format check mobile
        run: |
          cd ../..
          pnpm run format:mobile
          # Check if there are any changes after formatting
          git diff --exit-code || (echo "Code is not formatted. Please run 'pnpm run format:mobile'" && exit 1)

  mobile-build:
    name: Mobile Build Check
    runs-on: ubuntu-latest
    needs: [lint, mobile-test]
    defaults:
      run:
        working-directory: apps/mobile
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check Expo build configuration
        run: |
          npx expo export --platform web --output-dir dist
          echo "Build configuration is valid"

  # ----- Security & Dependency Audit -----
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Run security audit
        run: |
          pnpm audit --audit-level moderate

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: apps/backend/go.sum

      - name: Run Go security check (gosec)
        run: |
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          # Run gosec and output SARIF
          $GOPATH/bin/gosec -no-fail -fmt sarif -out results.sarif ./apps/backend/...

      - name: Upload SARIF file
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif

  # ----- Deployment (Production only) -----
  deploy-backend:
    name: Deploy Backend
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: [backend-build, security-audit]
    environment: production
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-binary
          path: ./artifacts

      # デプロイ先に応じてこのセクションをカスタマイズ
      # 例：Docker build & push, Railway, Render など
      - name: Build Docker image
        run: |
          # Dockerfileが存在する場合
          if [ -f "apps/backend/Dockerfile" ]; then
            echo "Building Docker image..."
            # docker build -t team-production-backend apps/backend
            # docker tag team-production-backend ${{ secrets.DOCKER_REGISTRY }}/team-production-backend:${{ github.sha }}
            # docker push ${{ secrets.DOCKER_REGISTRY }}/team-production-backend:${{ github.sha }}
          else
            echo "No Dockerfile found. Skipping Docker build."
          fi

  deploy-mobile:
    name: Deploy Mobile Preview
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: [mobile-build]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        working-directory: apps/mobile
        run: pnpm install --frozen-lockfile

      - name: Setup Expo
        uses: expo/expo-github-action@v8
        with:
          expo-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      - name: Create Expo Preview
        if: env.EXPO_TOKEN != ''
        working-directory: apps/mobile
        run: |
          # PR用のプレビューデプロイ（Expo Previewsまたは類似サービス）
          echo "Creating mobile preview..."
          # expo publish --non-interactive --max-workers 1
          # または expo build:web && deploy to preview service